import useSWR from "swr";
import { CountdownWidgetSettingsStateData } from "../../countdown-widget-provider/types";
import { COUNTDOWN_WIDGET_REST_API_ENDPOINTS } from "../../countdown-widget-rest-api/constants/endpoints";
import useEditorSettingsRestApi from "../../countdown-widget-rest-api/hooks/useEditorSettingsRestApi";
import { APIResponse } from "../../countdown-widget-rest-api/types";
import { CountdownWidgetThemeStateData } from "../../countdown-widget-theme-provider/types";
import { Countdown } from "../types";
import useMockEditorSettings from "./useMockEditorSettings";

interface UseEditorSettingsProps {
  /** if true load the mock data of the editor settings */
  isMockMode?: boolean;
  /** The current countdown rendered to the DOM by data-id attribute.
   * This value must be set to NULL if the component is used inside the editor
   */
  current: Countdown | Countdown["id"] | null;
}

export interface UseEditorSettingsAPIResponse {
  settings: CountdownWidgetSettingsStateData | undefined;
  theme: CountdownWidgetThemeStateData | undefined;
  isLoading?: boolean;
  isError?: any;
}

/**
 * Hook used to call the API to retrieve the data generated by the editor.
 *
 * @param isMockMode if true load the mock data of the editor settings. Set manually in dev environment.
 * @param current the current countdown ID
 *     *** WHEN WORKING WITH THE EDITOR ***
 *    - it is must set to NULL
 *
 *    *** WHEN WORKING WITH THE COUNTDOWN WIDGET ***
 *    - it is provided by the [data-id] attribute when the user add the shortcode with the id attribute in the page.
 */
export default function useEditorSettings({
  isMockMode,
  current = null,
}: UseEditorSettingsProps): UseEditorSettingsAPIResponse {
  if (isMockMode) {
    return useMockEditorSettings();
  }

  const { findById } = useEditorSettingsRestApi();

  let { data: response, error } = useSWR<APIResponse<Countdown>>(
    COUNTDOWN_WIDGET_REST_API_ENDPOINTS,
    findById
  );

  return {
    settings: undefined,
    theme: undefined,
    isLoading: false,
    isError: undefined,
  };
}
